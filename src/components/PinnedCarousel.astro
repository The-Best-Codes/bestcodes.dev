---
import EmblaCarousel from "./ui/carousel";
import { parse } from "node-html-parser";

const GITHUB_API_BASE = "https://api.github.com/graphql";

interface PinnedRepoResponse {
    data: {
        user: {
            pinnedItems: {
                nodes: PinnedRepo[];
            };
        };
    };
}

interface PinnedRepo {
    name: string;
    description: string | null;
    url: string;
    stargazerCount: number;
    forkCount: number;
    primaryLanguage: {
        name: string;
        color: string;
    } | null;
    coverImage?: {
        src: string | undefined;
        alt: string | undefined;
    } | null;
}

interface FormattedPinnedRepo {
    name: string;
    coverImage?: {
        src: string | undefined;
        alt: string | undefined;
    } | null;
    description: string | null;
    url: string;
}

async function getCoverImage(url: string) {
    try {
        const response = await fetch(url);
        if (!response.ok) {
            console.error(
                `Failed to fetch repo page for cover image: ${response.status} - ${url}`,
            );
            return null;
        }

        const htmlContent = await response.text();
        const root = parse(htmlContent);
        const images = root.querySelectorAll("img");
        const image = images.find(
            (img: any) => img.getAttribute("for") === "cover",
        );

        if (!image) {
            return null;
        }

        let src = image.getAttribute("src") || "";
        if (!src.startsWith("http") && !src.startsWith("https")) {
            src = `https://github.com${src}`;
        }
        const alt = image.getAttribute("alt");

        return { src, alt };
    } catch (error) {
        console.error("Error fetching repo cover image:", error);
        return null;
    }
}

async function fetchPinnedRepos(
    username: string = "The-Best-Codes",
    includeCover: boolean = true,
): Promise<PinnedRepo[]> {
    const query = `
        {
          user(login: "${username}") {
            pinnedItems(first: 6, types: REPOSITORY) {
              nodes {
                ... on Repository {
                  name
                  description
                  url
                  stargazerCount
                  forkCount
                  primaryLanguage {
                    name
                    color
                  }
                }
              }
            }
          }
        }
      `;

    try {
        const response = await fetch(GITHUB_API_BASE, {
            method: "POST",
            headers: {
                Authorization: `Bearer ${import.meta.env.GITHUB_ACCESS_TOKEN}`,
                "Content-Type": "application/json",
            },
            body: JSON.stringify({ query }),
        });

        if (!response.ok) {
            console.error(
                `HTTP error: ${response.status} - ${GITHUB_API_BASE} - GraphQL Query: ${query}`,
            );
            throw new Error(`HTTP error! status: ${response.status}`);
        }

        const responseData: PinnedRepoResponse = await response.json();
        let pinnedRepos = responseData.data.user.pinnedItems
            .nodes as PinnedRepo[];

        if (includeCover) {
            const repoPromises = pinnedRepos.map((repo) =>
                getCoverImage(repo.url),
            );
            const coverImagePaths = await Promise.all(repoPromises);
            pinnedRepos.forEach((repo, index) => {
                repo.coverImage = coverImagePaths[index];
            });
        }
        return pinnedRepos;
    } catch (error) {
        console.error("Error fetching pinned repos:", error);
        return [];
    }
}

let carouselData: FormattedPinnedRepo[] = [];
let error: string | null = null;

try {
    const username = "The-Best-Codes";
    const pinnedRepos = await fetchPinnedRepos(username);

    carouselData = pinnedRepos.map((repo) => ({
        name: repo.name,
        url: repo.url,
        description: repo.description || "No description",
        coverImage: repo.coverImage || ({ src: "/image/not_found.png" } as any),
    }));
} catch (e: any) {
    console.error("Error processing pinned repos:", e);
    error = "Failed to load repositories. Please try again later.";
    carouselData = [];
}
---

{
    error ? (
        <div class="w-full max-w-40 md:max-w-xs mx-auto text-center p-4">
            <p class="text-red-500">{error}</p>
        </div>
    ) : (
        <EmblaCarousel data={carouselData} client:load />
    )
}
