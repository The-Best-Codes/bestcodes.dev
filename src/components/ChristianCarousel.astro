---
import EmblaCarousel from "./ui/carousel";
import { parse } from "node-html-parser";

const GITHUB_API_BASE = "https://api.github.com";
const PER_PAGE = 100;

interface GitHubRepo {
    name: string;
    description: string | null;
    html_url: string;
    updated_at: string;
    topics: string[];
    language: string | null;
    stargazers_count: number;
    forks_count: number;
    coverImage?: {
        src: string | undefined;
        alt: string | undefined;
    } | null;
}

interface SearchResponse {
    items: GitHubRepo[];
}

interface FormattedRepo {
    name: string;
    coverImage?: {
        src: string | undefined;
        alt: string | undefined;
    } | null;
    description: string | null;
    url: string;
    updatedAt: string;
    topics: string[];
    language: string | null;
    stargazersCount: number;
    forksCount: number;
}

async function fetchReposByTopic(
    username: string,
    topic: string,
    page = 1,
): Promise<SearchResponse> {
    const query = `topic:${topic} user:${username}`;
    const url = `${GITHUB_API_BASE}/search/repositories?q=${encodeURIComponent(
        query,
    )}&sort=updated&order=desc&per_page=${PER_PAGE}&page=${page}`;

    const response = await fetch(url, {
        headers: {
            Authorization: `Bearer ${import.meta.env.GITHUB_ACCESS_TOKEN}`,
            Accept: "application/vnd.github.v3+json",
        },
    });

    if (!response.ok) {
        console.error(`HTTP error: ${response.status} - ${url}`);
        throw new Error(`HTTP error! status: ${response.status}`);
    }

    return await response.json();
}

async function getCoverImage(url: string) {
    try {
        const response = await fetch(url);
        if (!response.ok) {
            console.error(
                `Failed to fetch repo page for cover image: ${response.status} - ${url}`,
            );
            return null; // Do not throw, just log and continue
        }

        const htmlContent = await response.text();
        const root = parse(htmlContent);
        const images = root.querySelectorAll("img");
        const image = images.find(
            (img: any) => img.getAttribute("for") === "cover",
        );

        if (!image) {
            return null;
        }

        let src = image.getAttribute("src") || "";
        if (!src.startsWith("http") && !src.startsWith("https")) {
            src = `https://github.com${src}`;
        }
        const alt = image.getAttribute("alt");

        return { src, alt };
    } catch (error) {
        console.error("Error fetching repo cover image:", error);
        return null; // Do not throw, just log and continue
    }
}

// Fetch repos from GitHub API directly at build time.
let repos: FormattedRepo[] = [];

try {
    const username = "The-Best-Codes";
    const topic = "christianity";
    let allRepos: GitHubRepo[] = [];
    let page = 1;
    let hasMorePages = true;

    while (hasMorePages) {
        const data = await fetchReposByTopic(username, topic, page);
        allRepos = allRepos.concat(data.items);

        const repoPromises = data.items.map((repo) =>
            getCoverImage(repo.html_url),
        );
        const coverImagePaths = await Promise.all(repoPromises);

        data.items.forEach((repo, index) => {
            const coverImage = coverImagePaths[index];
            repo.coverImage = coverImage;
        });

        if (data.items.length < PER_PAGE) {
            hasMorePages = false;
        } else {
            page++;
        }
    }

    repos = allRepos.map((repo) => ({
        name: repo.name,
        coverImage: repo.coverImage,
        description: repo.description,
        url: repo.html_url,
        updatedAt: repo.updated_at,
        topics: repo.topics,
        language: repo.language,
        stargazersCount: repo.stargazers_count,
        forksCount: repo.forks_count,
    }));
} catch (err) {
    console.error("Error fetching repos:", err);
    repos = []; // Fallback to empty array on error
}
---

<EmblaCarousel data={repos} client:only />
